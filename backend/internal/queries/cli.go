package queries

import (
	"fmt"
	"os"
	"strings"
	"text/tabwriter"
)

// QueryCLI provides command-line interface for query management
type QueryCLI struct {
	manager *YAMLQueryManager
}

// NewQueryCLI creates a new query CLI
func NewQueryCLI() (*QueryCLI, error) {
	manager, err := NewYAMLQueryManager()
	if err != nil {
		return nil, err
	}

	return &QueryCLI{manager: manager}, nil
}

// ListQueries displays all available queries
func (cli *QueryCLI) ListQueries() {
	queries := cli.manager.ListQueriesWithMetadata()

	w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
	fmt.Fprintln(w, "CATEGORY\tNAME\tOPERATION\tDESCRIPTION")
	fmt.Fprintln(w, "--------\t----\t---------\t-----------")

	for name, queryDef := range queries {
		// Extract query name from the key
		parts := strings.Split(name, ".")
		queryName := name
		if len(parts) > 1 {
			queryName = parts[1]
		}

		fmt.Fprintf(w, "%s\t%s\t%s\t%s\n",
			queryDef.Category,
			queryName,
			queryDef.Operation,
			queryDef.Description)
	}
	w.Flush()
}

// ShowQuery displays detailed information about a specific query
func (cli *QueryCLI) ShowQuery(name string) error {
	// Try to find query by name
	queryDef, err := cli.manager.GetQueryDefinition(name)
	if err != nil {
		// Try with category prefix
		parts := strings.Split(name, ".")
		if len(parts) == 2 {
			queryDef, err = cli.manager.GetQueryDefinition(parts[1])
			if err != nil {
				return fmt.Errorf("query '%s' not found", name)
			}
		} else {
			return err
		}
	}

	query, err := cli.manager.GetQuery(name)
	if err != nil {
		// Try without category prefix
		parts := strings.Split(name, ".")
		if len(parts) == 2 {
			query, err = cli.manager.GetQuery(parts[1])
			if err != nil {
				return fmt.Errorf("query '%s' not found", name)
			}
		} else {
			return err
		}
	}

	fmt.Printf("Query: %s\n", name)
	fmt.Printf("Category: %s\n", queryDef.Category)
	fmt.Printf("Operation: %s\n", queryDef.Operation)
	fmt.Printf("Description: %s\n", queryDef.Description)
	fmt.Printf("Tags: %s\n", strings.Join(queryDef.Tags, ", "))

	if len(queryDef.Parameters) > 0 {
		fmt.Println("\nParameters:")
		w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
		fmt.Fprintln(w, "NAME\tTYPE\tREQUIRED\tDESCRIPTION")
		fmt.Fprintln(w, "----\t----\t--------\t-----------")

		for _, param := range queryDef.Parameters {
			required := "No"
			if param.Required {
				required = "Yes"
			}
			fmt.Fprintf(w, "%s\t%s\t%s\t%s\n",
				param.Name, param.Type, required, param.Description)
		}
		w.Flush()
	}

	fmt.Println("\nSQL:")
	fmt.Println(strings.Repeat("-", 50))
	fmt.Println(query)

	return nil
}

// ListByCategory displays queries grouped by category
func (cli *QueryCLI) ListByCategory() {
	categories := cli.manager.GetCategories()

	for categoryName, categoryDef := range categories {
		fmt.Printf("\n%s - %s\n", strings.ToUpper(categoryName), categoryDef.Description)
		fmt.Println(strings.Repeat("=", len(categoryName)+len(categoryDef.Description)+3))

		queries, err := cli.manager.GetQueriesByCategory(categoryName)
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			continue
		}

		for _, queryName := range queries {
			queryDef, _ := cli.manager.GetQueryDefinition(queryName)
			fmt.Printf("  %s - %s (%s)\n", queryName, queryDef.Description, queryDef.Operation)
		}
	}
}

// ListByTag displays queries grouped by tag
func (cli *QueryCLI) ListByTag(tag string) {
	queries := cli.manager.GetQueriesByTag(tag)

	fmt.Printf("Queries with tag '%s':\n", tag)
	fmt.Println(strings.Repeat("=", len(tag)+20))

	if len(queries) == 0 {
		fmt.Println("No queries found with this tag.")
		return
	}

	for _, queryName := range queries {
		queryDef, _ := cli.manager.GetQueryDefinition(strings.Split(queryName, ".")[1])
		fmt.Printf("  %s - %s\n", queryName, queryDef.Description)
	}
}

// ValidateQueries validates all queries and configuration
func (cli *QueryCLI) ValidateQueries() error {
	fmt.Println("Validating query configuration...")

	// Check if all queries are loadable
	queries := cli.manager.ListQueries()
	var errors []string

	for _, queryName := range queries {
		_, err := cli.manager.GetQuery(queryName)
		if err != nil {
			errors = append(errors, fmt.Sprintf("Query '%s': %v", queryName, err))
		}
	}

	if len(errors) > 0 {
		fmt.Println("Validation errors found:")
		for _, err := range errors {
			fmt.Printf("  - %s\n", err)
		}
		return fmt.Errorf("validation failed with %d errors", len(errors))
	}

	fmt.Printf("âœ“ All %d queries validated successfully\n", len(queries))
	return nil
}

// ExportQueries exports all queries to stdout
func (cli *QueryCLI) ExportQueries() {
	queries := cli.manager.ExportQueries()

	fmt.Println("-- Exported Queries")
	fmt.Println("-- Generated by QueryCLI")
	fmt.Println()

	for name, sql := range queries {
		fmt.Printf("-- Query: %s\n", name)
		fmt.Println(sql)
		fmt.Println()
	}
}

// ShowStats displays statistics about the query configuration
func (cli *QueryCLI) ShowStats() {
	queries := cli.manager.ListQueriesWithMetadata()
	categories := cli.manager.GetCategories()

	fmt.Println("Query Configuration Statistics")
	fmt.Println("==============================")
	fmt.Printf("Total queries: %d\n", len(queries))
	fmt.Printf("Total categories: %d\n", len(categories))

	// Count by operation
	operationCount := make(map[string]int)
	for _, queryDef := range queries {
		operationCount[queryDef.Operation]++
	}

	fmt.Println("\nBy Operation:")
	for operation, count := range operationCount {
		fmt.Printf("  %s: %d\n", operation, count)
	}

	// Count by category
	fmt.Println("\nBy Category:")
	for categoryName := range categories {
		categoryQueries, _ := cli.manager.GetQueriesByCategory(categoryName)
		fmt.Printf("  %s: %d\n", categoryName, len(categoryQueries))
	}

	// Count parameters
	totalParams := 0
	requiredParams := 0
	for _, queryDef := range queries {
		totalParams += len(queryDef.Parameters)
		for _, param := range queryDef.Parameters {
			if param.Required {
				requiredParams++
			}
		}
	}

	fmt.Printf("\nTotal parameters: %d\n", totalParams)
	fmt.Printf("Required parameters: %d\n", requiredParams)
}

// RunCLI runs the interactive CLI
func (cli *QueryCLI) RunCLI() {
	fmt.Println("Query Manager CLI")
	fmt.Println("=================")
	fmt.Println("Available commands:")
	fmt.Println("  list                    - List all queries")
	fmt.Println("  show <name>             - Show detailed query information")
	fmt.Println("  category                - List queries by category")
	fmt.Println("  tag <tag>               - List queries by tag")
	fmt.Println("  validate                - Validate all queries")
	fmt.Println("  export                  - Export all queries")
	fmt.Println("  stats                   - Show configuration statistics")
	fmt.Println("  help                    - Show this help")
	fmt.Println("  quit                    - Exit")
	fmt.Println()

	for {
		fmt.Print("> ")
		var input string
		fmt.Scanln(&input)

		parts := strings.Fields(input)
		if len(parts) == 0 {
			continue
		}

		command := parts[0]
		args := parts[1:]

		switch command {
		case "list":
			cli.ListQueries()
		case "show":
			if len(args) == 0 {
				fmt.Println("Usage: show <query_name>")
				continue
			}
			if err := cli.ShowQuery(args[0]); err != nil {
				fmt.Printf("Error: %v\n", err)
			}
		case "category":
			cli.ListByCategory()
		case "tag":
			if len(args) == 0 {
				fmt.Println("Usage: tag <tag_name>")
				continue
			}
			cli.ListByTag(args[0])
		case "validate":
			if err := cli.ValidateQueries(); err != nil {
				fmt.Printf("Error: %v\n", err)
			}
		case "export":
			cli.ExportQueries()
		case "stats":
			cli.ShowStats()
		case "help":
			fmt.Println("Available commands: list, show, category, tag, validate, export, stats, help, quit")
		case "quit", "exit":
			fmt.Println("Goodbye!")
			return
		default:
			fmt.Printf("Unknown command: %s. Type 'help' for available commands.\n", command)
		}
		fmt.Println()
	}
}
